name: Enhanced CI Pipeline

on:
  pull_request:
    branches: ["main", "develop"]
  push:
    branches: ["main", "develop"]
  workflow_dispatch:
    inputs:
      test_suite:
        description: "Test suite to run"
        required: true
        default: "smoke"
        type: choice
        options:
          - smoke
          - regression
          - api
          - integration
          - all

env:
  NODE_VERSION: 20
  ORANGEHRM_BASE_URL: "https://opensource-demo.orangehrmlive.com"
  ORANGEHRM_USERNAME: "Admin"
  ORANGEHRM_PASSWORD: "admin123"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pre-flight validation - fail fast
  validation:
    name: Code Quality & Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint:ci

      - name: Format check
        run: npm run format:check

      - name: Type check
        run: npx tsc --noEmit

      - name: Security audit
        run: npm run security:audit

  # API tests - fastest feedback
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: validation
    timeout-minutes: 15
    if: always() && needs.validation.result == 'success'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] || [ "${{ github.event.inputs.test_suite }}" = "smoke" ]; then
            npm run test:api:smoke
          else
            npm run test:api
          fi

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results
          path: test-results/

  playwright:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest
    needs: [validation, api-tests]
    timeout-minutes: 20
    if: always() && needs.validation.result == 'success'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ needs.validation.outputs.cache-key }}-playwright

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] || [ "${{ github.event.inputs.test_suite }}" = "smoke" ]; then
            npx playwright test --grep "@smoke"
          elif [ "${{ github.event.inputs.test_suite }}" = "regression" ]; then
            npx playwright test --grep "@regression"
          else
            npm test
          fi

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

  bdd:
    name: Cucumber BDD Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validation, playwright]
    if: always() && needs.validation.result == 'success'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ needs.validation.outputs.cache-key }}-playwright

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # Smart test selection based on trigger
      - name: Run BDD tests
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            npm run bdd:smoke
          elif [ "${{ github.event.inputs.test_suite }}" = "smoke" ]; then
            npm run bdd:smoke
          elif [ "${{ github.event.inputs.test_suite }}" = "regression" ]; then
            npm run bdd:regression
          else
            npm run bdd:all
          fi
        env:
          CI: "true"

      - name: Generate BDD HTML report
        if: always()
        run: npm run bdd:report

      - name: Upload BDD report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cucumber-bdd-report
          path: reports/cucumber-html

  # API+UI Integration tests
  integration:
    name: API+UI Integration
    runs-on: ubuntu-latest
    needs: [validation, api-tests]
    timeout-minutes: 25
    if: always() && needs.validation.result == 'success'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ needs.validation.outputs.cache-key }}-playwright

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Integration tests (Both modes)
        if: github.event.inputs.test_suite == 'integration' || github.event.inputs.test_suite == 'all' || github.event_name == 'push'
        env:
          ORANGEHRM_BASE_URL: ${{ env.ORANGEHRM_BASE_URL }}
          ORANGEHRM_USERNAME: ${{ env.ORANGEHRM_USERNAME }}
          ORANGEHRM_PASSWORD: ${{ env.ORANGEHRM_PASSWORD }}
        run: npm run ci:test:integration

      - name: Upload Integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-results/

  # Accessibility checks
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: validation
    timeout-minutes: 15
    if: always() && needs.validation.result == 'success'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run accessibility tests
        run: npm run ci:test:a11y

      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-reports
          path: reports/a11y

  # Test summary and notification
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [validation, api-tests, playwright, bdd, integration, accessibility]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Generate test summary
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Tests | ${{ needs.api-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.playwright.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| BDD Tests | ${{ needs.bdd.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration | ${{ needs.integration.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | ${{ needs.accessibility.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Check overall status
        if: contains(needs.*.result, 'failure')
        run: |
          echo "::error::One or more test suites failed"
          exit 1
