name: Monitoring & Observability

# Reduced frequency to prevent failures
on:
  schedule:
    # Monitor system health every 6 hours instead of hourly
    - cron: "0 */6 * * *"
  workflow_dispatch:
    inputs:
      check_type:
        description: "Type of health check"
        required: true
        default: "quick"
        type: choice
        options:
          - quick
          - full
          - performance

env:
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  # System health monitoring
  health-check:
    name: System Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run health check tests
        run: |
          case "${{ github.event.inputs.check_type || 'full' }}" in
            "quick")
              npm run test:health:quick
              ;;
            "performance")
              npm run test:performance
              ;;
            *)
              npm run test:health:full
              ;;
          esac
        env:
          HEALTH_CHECK: true
          TEST_TIMEOUT: 30000

      - name: Generate health report
        if: always()
        run: |
          echo "## 🏥 System Health Report" >> $GITHUB_STEP_SUMMARY
          echo "**Check Type:** ${{ github.event.inputs.check_type || 'full' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure() && env.SLACK_WEBHOOK != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"🚨 Health check failed! <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View details>"}' \
            ${{ env.SLACK_WEBHOOK }}

  # Performance monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.check_type == 'performance' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun --config=lighthouserc.json || echo "Lighthouse config not found"

      - name: Performance baseline check
        run: |
          echo "🚀 Running performance baseline tests"
          # Add your performance testing logic here
          # Examples: load testing, response time checks, etc.

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            .lighthouseci/
            performance-results/

  # Dependency monitoring
  dependency-monitoring:
    name: Dependency Monitoring
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Check for updates
        run: |
          npm outdated --json > outdated.json || true
          if [ -s outdated.json ]; then
            echo "📦 Outdated dependencies detected"
            cat outdated.json
          else
            echo "✅ All dependencies are up to date"
          fi

      - name: Security audit
        run: |
          npm audit --audit-level=moderate --json > audit.json || true
          if [ -s audit.json ]; then
            VULNERABILITIES=$(cat audit.json | jq '.metadata.vulnerabilities.total // 0')
            if [ "$VULNERABILITIES" -gt 0 ]; then
              echo "🚨 Found $VULNERABILITIES vulnerabilities"
              cat audit.json
            fi
          fi

      - name: Create dependency update PR
        if: github.event_name == 'schedule'
        run: |
          # This would create automated PRs for dependency updates
          echo "🔄 Dependency update automation would run here"
          # Tools like Dependabot, Renovate, or custom scripts

  # Test environment monitoring
  test-environment-health:
    name: Test Environment Health
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check test environments
        run: |
          echo "🔍 Checking test environment health"

          # Check staging environment
          STAGING_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://staging.yourapp.com/health || echo "000")
          if [ "$STAGING_STATUS" = "200" ]; then
            echo "✅ Staging environment is healthy"
          else
            echo "❌ Staging environment returned status: $STAGING_STATUS"
          fi

          # Check production environment
          PROD_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://yourapp.com/health || echo "000")
          if [ "$PROD_STATUS" = "200" ]; then
            echo "✅ Production environment is healthy"
          else
            echo "❌ Production environment returned status: $PROD_STATUS"
          fi

      - name: Database connectivity check
        run: |
          echo "🗄️ Checking database connectivity"
          # Add database health checks here

      - name: External service checks
        run: |
          echo "🌐 Checking external service dependencies"
          # Add checks for external APIs, services, etc.

  # Metrics collection
  metrics-collection:
    name: Collect Metrics
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Collect CI/CD metrics
        run: |
          echo "📊 Collecting CI/CD metrics"

          # Example metrics to collect:
          # - Build duration trends
          # - Test success rates
          # - Deployment frequency
          # - Lead time for changes
          # - Mean time to recovery

      - name: Push metrics to monitoring system
        run: |
          echo "📈 Pushing metrics to monitoring system"
          # Push to your monitoring system (DataDog, New Relic, etc.)

  # Alert aggregation
  alert-summary:
    name: Alert Summary
    runs-on: ubuntu-latest
    needs:
      [
        health-check,
        performance-monitoring,
        dependency-monitoring,
        test-environment-health,
      ]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Generate alert summary
        run: |
          echo "## 🚨 Monitoring Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Health Check | ${{ needs.health-check.result }} | System functionality |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-monitoring.result }} | Response times & load |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-monitoring.result }} | Security & updates |" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ needs.test-environment-health.result }} | Infrastructure health |" >> $GITHUB_STEP_SUMMARY

      - name: Send consolidated alerts
        if: contains(needs.*.result, 'failure')
        run: |
          echo "🚨 Sending consolidated failure alerts"
          # Send aggregated alerts to reduce noise
