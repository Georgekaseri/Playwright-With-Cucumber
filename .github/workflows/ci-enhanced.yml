name: Enhanced CI Pipeline

on:
  pull_request:
    branches: ["main", "develop"]
  push:
    branches: ["main", "develop"]
  schedule:
    # Run nightly regression tests
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      test_suite:
        description: "Test suite to run"
        required: true
        default: "smoke"
        type: choice
        options:
          - smoke
          - regression
          - api
          - all

env:
  NODE_VERSION: 20
  ORANGEHRM_BASE_URL: "https://opensource-demo.orangehrmlive.com"
  ORANGEHRM_USERNAME: "Admin"
  ORANGEHRM_PASSWORD: "admin123"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pre-flight checks - fail fast
  validation:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Type check
        run: npx tsc --noEmit

      - name: Security audit
        run: npm audit --audit-level=high

      - name: License check
        run: npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC'

  # Unit tests (if you add them)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: validation
    timeout-minutes: 10
    if: always() && needs.validation.result == 'success'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit || echo "No unit tests yet"

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()

  # API Tests - fastest feedback
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: validation
    timeout-minutes: 15
    if: always() && needs.validation.result == 'success'
    strategy:
      matrix:
        environment: [staging, production]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run API tests
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            npm run test:api:smoke
          else
            npm run test:api
          fi
        env:
          TEST_ENV: ${{ matrix.environment }}

      - name: Upload API test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results-${{ matrix.environment }}
          path: test-results/

  # E2E Tests - parallel execution
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [validation, api-tests]
    timeout-minutes: 30
    if: always() && needs.validation.result == 'success'
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2, 3, 4]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ needs.validation.outputs.cache-key }}-playwright-${{ matrix.browser }}

      - name: Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: Run E2E tests
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/4 --grep "@smoke"
          else
            npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/4
          fi

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}-shard-${{ matrix.shard }}
          path: |
            playwright-report/
            test-results/

  # BDD Tests - behavior validation
  bdd-tests:
    name: BDD Tests
    runs-on: ubuntu-latest
    needs: [validation, e2e-tests]
    timeout-minutes: 25
    if: always() && needs.validation.result == 'success'
    strategy:
      matrix:
        tag: [smoke, regression, negative]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ needs.validation.outputs.cache-key }}-playwright

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run BDD tests
        run: |
          case "${{ matrix.tag }}" in
            "smoke")
              npm run bdd:smoke
              ;;
            "regression")
              npm run bdd:regression
              ;;
            "negative")
              npm run bdd:negative
              ;;
          esac
        env:
          CI: true

      - name: Generate BDD report
        if: always()
        run: npm run bdd:report

      - name: Upload BDD report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bdd-report-${{ matrix.tag }}
          path: reports/cucumber-html/

  # Performance tests (optional)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: validation
    timeout-minutes: 20
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          # Add lighthouse CI or other performance testing tools
          echo "Performance tests would run here"

  # Report aggregation
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests, e2e-tests, bdd-tests]
    if: always()
    timeout-minutes: 10

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "## ðŸ§ª Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} | Basic functionality |" >> $GITHUB_STEP_SUMMARY
          echo "| API Tests | ${{ needs.api-tests.result }} | Service integration |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} | User workflows |" >> $GITHUB_STEP_SUMMARY
          echo "| BDD Tests | ${{ needs.bdd-tests.result }} | Business scenarios |" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::One or more test suites failed"
          exit 1
