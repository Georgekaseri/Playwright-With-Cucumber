name: Continuous Deployment

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: "Force deployment (skip some checks)"
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: 20

jobs:
  # Build artifacts
  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-id: ${{ steps.build-id.outputs.id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="$(date +'%Y%m%d')-${GITHUB_SHA:0:7}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate build ID
        id: build-id
        run: echo "id=${{ github.run_number }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT

      - name: Build test artifacts
        run: |
          # Build your test suite for deployment
          npm run build || echo "No build script defined"

          # Create deployment package
          tar -czf test-suite-${{ steps.version.outputs.version }}.tar.gz \
            src/ \
            package.json \
            package-lock.json \
            playwright.config.ts \
            cucumber.config.js \
            tsconfig.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-suite-${{ steps.version.outputs.version }}
          path: test-suite-${{ steps.version.outputs.version }}.tar.gz
          retention-days: 30

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "playwright-cucumber"
          path: "."
          format: "JSON"

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: reports/

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    environment: staging
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v6
        with:
          name: test-suite-${{ needs.build.outputs.version }}

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying test suite version ${{ needs.build.outputs.version }} to staging"
          # Add your staging deployment logic here
          # Examples:
          # - Upload to test infrastructure
          # - Update test environments
          # - Configure test data

      - name: Health check
        run: |
          echo "üè• Running health checks on staging"
          # Add health check logic
          sleep 5
          echo "‚úÖ Staging deployment healthy"

      - name: Run smoke tests against staging
        run: |
          echo "üß™ Running smoke tests against staging"
          # You could run a subset of tests against the deployed environment
          # npm run test:staging:smoke

  # Deploy to production (manual approval required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    environment: production
    timeout-minutes: 30
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v6
        with:
          name: test-suite-${{ needs.build.outputs.version }}

      - name: Pre-deployment checks
        if: github.event.inputs.force_deploy != 'true'
        run: |
          echo "üîç Running pre-deployment validation"
          # Add production readiness checks
          # - Database migration checks
          # - Feature flag validation
          # - Dependency verification

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying test suite version ${{ needs.build.outputs.version }} to production"
          # Add your production deployment logic here

      - name: Post-deployment verification
        run: |
          echo "‚úÖ Running post-deployment verification"
          # Add production health checks
          # - API endpoint validation
          # - Critical path testing
          # - Performance baseline check

      - name: Create release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## üöÄ Release Notes

            **Version:** ${{ needs.build.outputs.version }}
            **Build ID:** ${{ needs.build.outputs.build-id }}

            ### What's Changed
            - Automated deployment from commit ${{ github.sha }}
            - All tests passing ‚úÖ
            - Security scans clean ‚úÖ

            ### Test Coverage
            - E2E Tests: Playwright across multiple browsers
            - BDD Tests: Cucumber scenarios with business validation
            - API Tests: Service integration and contract testing

            [View full deployment logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          draft: false
          prerelease: false

  # Rollback capability
  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 15
    if: failure() && (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch')

    steps:
      - name: Rollback deployment
        run: |
          echo "üîÑ Initiating rollback procedure"
          # Add rollback logic here
          # - Restore previous version
          # - Reset configuration
          # - Validate rollback success

      - name: Notify team
        run: |
          echo "üì¢ Deployment rollback completed"
          # Add notification logic (Slack, email, etc.)
